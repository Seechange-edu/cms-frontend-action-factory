name: Build and Push dist

on:
  release:
    types: [created]

# ‰ΩøÁî®Âπ∂ÂèëÂèñÊ∂à‰ªª‰ΩïÂΩìÂâç‰Ωú‰∏öÊàñËøêË°å
concurrency:
  group: ${{github.ref}}
  cancel-in-progress: true

jobs:
  action_trigger:
    if:  startsWith(github.ref, 'refs/tags/cms-frontend/') 
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps: 
      - name: get tag info
        uses: MashyChen/tag-parse-action@main
        with:
          githubToken: ${{ secrets.ACCESS_TOKEN }}
          type: parse

      - name: checkout code
        uses: actions/checkout@v4
        with:
          repository: SeeChange-edu/${{ env.REPOSITORY }}
          token: ${{ secrets.ACCESS_TOKEN }}
          ref: ${{ env.BRANCH }}

      - name: setup nodejs
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: yarn

      - name: Build Yarn
        run: |
            yarn --frozen-lockfile
            echo ${{ env.PUSHREF }}
            cp ./env/${{ env.PUSHREF }}.env .env.production
            yarn build

      - name: Build and push Docker image
        run: |
              echo ${{ secrets.TOKEN }} | docker login registry.digitalocean.com -u hilton.lam@asiaalliedgroup.com --password-stdin
              docker build --tag ${{ env.IMAGE }} --file Dockerfile-Self .
              docker push ${{ env.IMAGE }}

      - name: SSH and Run Docker image
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.REMOTE_HOST }}
          username: ${{ vars.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
              docker pull ${{ env.IMAGE }}
              if [ "$(docker ps -a --format '{{.Names}}' | grep -c ${{ env.NAME }})" -gt 0 ]; then 
                docker rm -f ${{ env.NAME }}
              fi
              docker run --name ${{ env.NAME }} -d -p ${{ env.OUT_PORT }}:${{ env.PORT }} --restart unless-stopped ${{ env.IMAGE }}
              docker image prune --force
              docker container prune --force
              
  notify-teams:
    if: always()
    needs: [ action_trigger ]
    runs-on: ubuntu-latest
    steps:
      - name: Send Teams Notification
        env:
          WEBHOOK: ${{ vars.TEAMS_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "${{ needs.build.result == 'success' && '00FF00' || 'FF0000' }}",
            "summary": "${{ needs.build.result == 'success' && 'üéâ Build succeeded!' || '‚ùå Build failed!' }}:${{ github.repository }}:${{ github.workflow }}",
            "title": "${{ needs.build.result == 'success' && 'üéâ Build succeeded!' || '‚ùå Build failed!' }}:${{ github.repository }}:${{ github.workflow }}",
            "sections": [{
              "facts": [
                { "name": "Repository", "value": "${{ github.repository }}" },
                { "name": "Triggered by", "value": "${{ github.event_name }}" },
                { "name": "Author", "value": "@${{ github.actor }}" },
                { "name": "Commit Message", "value": "${{ github.event.head_commit.message }}" },
                { "name": "Result", "value": "${{ needs.build.result }}" }
              ],
              "text": "[View Workflow Run](${{ env.RUN_URL }})"
            }]
          }' \
          "$WEBHOOK"
        
            
